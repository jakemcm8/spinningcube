import Head from 'next/head'
import React, { Suspense, useRef, useState, useEffect } from 'react'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { Canvas, useFrame, extend, useThree } from '@react-three/fiber'
import Box from '../components/compBox'
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { useMoralis, useMoralisFile } from 'react-moralis'
import LoggedIn from '../components/loggedIn.jsx'
import logo from '../public/logo.svg'
import Spinner from '../components/spinnerLogo.jsx'


extend({ OrbitControls });

const CameraControls = () => {

  const {
    camera,
    gl: { domElement },
  } = useThree();

  const controls = useRef();
  useFrame((state) => controls.current.update());
  return <orbitControls ref={controls} args={[camera, domElement]} />;

}

const downloadFile = ({ data, fileName, fileType, saveFile }) => {
  // Create a blob with the data we want to download as a file
  const blob = new Blob([data], { type: fileType })
  saveFile(fileName, blob, { saveIPFS: true, type: fileType });
  //   // Create an anchor element and dispatch a click event on it
  //   // to trigger a download
  //   const a = document.createElement('a')
  //   a.download = fileName
  //   a.href = window.URL.createObjectURL(blob)
  //   const clickEvt = new MouseEvent('click', {
  //     view: window,
  //     bubbles: true,
  //     cancelable: true,
  //   })
  //   a.dispatchEvent(clickEvt)
  //   a.remove()
}


export default function Home() {

  const {
    error,
    isUploading,
    moralisFile,
    saveFile,
  } = useMoralisFile();

  const [minting, setMinting] = useState(false);
  const [gltfObj, setGltfobj] = useState();
  const { Moralis, isInitialized, authenticate, isAuthenticated, user, enableWeb3 } = useMoralis();

  const exportToJson = e => {
    setMinting(true);
    e.preventDefault()
    downloadFile({
      data: JSON.stringify(gltfObj),
      fileName: 'gltfObj.gltf',
      fileType: 'model/gltf+json',
      saveFile: saveFile,
    })
  }
  useEffect(() => {
    const fetchData = async () => {
      let { ipfs, hash } = moralisFile;
      let metadata = {
        name: 'cube',
        description: '3d cube',
        image: '/ipfs/' + hash
      }

      let jsonFile = new Moralis.File('metadata.json', { base64: btoa(JSON.stringify(metadata)) })
      await jsonFile.saveIPFS();
      let metadataHash = jsonFile.hash();
      console.log(metadataHash);

      let rariInfo = await Moralis.Plugins.rarible.lazyMint({
        chain: 'rinkeby',
        userAddress: user.get('ethAddress'),
        tokenType: 'ERC721',
        tokenUri: '/ipfs/' + metadataHash,
        royalties: .69,
      })
      console.log(rariInfo);
      let token_address = rariInfo.data.result.tokenAddress;
      let token_id = rariInfo.data.result.tokenId;
      let rariLink = `https://rinkeby.rarible.com/token/${token_address}:${token_id}`
      setMinting(false);
      console.log(rariLink);
      console.log(token_id);
      window.open(rariLink, '_blank').focus()

      // rariLink doesn't create a fully copyable link when addying token id and address--also there is no cover photo
    }
    if ((moralisFile !== null) && (minting === true)) {
      console.log()
      fetchData();
    }

  }, [moralisFile])

  useEffect(() => {
    enableWeb3();
  }, [])



  return (
    <div className={`bg-gradient-to-br from-pink-200 via-pink-400 to-purple-500 ${styles.container} relative`}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin />
        <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet"></link>
      </Head>

      {/* on click, download cube with next files from folder in textures directory with downloadFile func */}
      {/* <button className='btn fixed'>Create</button> */}

      <div className="z-10 absolute">
        <h1 id='welcome-text' className="left-1/2">Welcome to &apos;Q&apos;ube</h1>
        {(!isAuthenticated) ? (
            <button id='sign-in' className='btn flex gap-4 items-center' onClick={() => authenticate()}>Sign in</button>)
          :
            (<LoggedIn exportJson={exportToJson} minting={minting} />)}
      </div>

      <div className="h-screen w-screen z-0">
        <Canvas id='qube'>
          <ambientLight />
          <CameraControls />
          <pointLight position={[10, 10, 10]} />
          <Suspense fallback={null}>
            <Box position={[0, 0, 0]} scale={2} setObj={setGltfobj} />
          </Suspense>
        </Canvas>
      </div>
    </div>
  )
}
